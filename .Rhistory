if(rawdataout){
d_out$precensor[[iparamset]]<-dat
d_out$postcensor[[iparamset]]<-h_datc
}
iparamset<-iparamset+1
toc()
#progress(iparamset,max.value=totparamsets)
} # end iR
# Organize the output and return it
if(rawdataout){
outpt<-list(results=as.data.table(out),
parameterselections=list(trialdesigns=trialdesigns,
respparamsets=respparamsets,
blparamsets=blparamsets,
censorparams=censorparams,
modelparams=modelparams,
analysisparams=analysisparams,
simparam=simparam),
rawdata=d_out)
}else{
outpt<-list(results=as.data.table(out),
parameterselections=list(trialdesigns=trialdesigns,
respparamsets=respparamsets,
blparamsets=blparamsets,
censorparams=censorparams,
modelparams=modelparams,
analysisparams=analysisparams,
simparam=simparam))
}
if(simparam$progressiveSave){
setwd(simparam$savedir)
saveRDS(outpt,paste(simparam$basesavename,iLL,sep="_save"))
}
toc()
} # end iLL
censorparams
length(censorparams)
if(length(censorparams)<2){
if(is.na(censorparams)){
nocensoringflag<-TRUE
}
}
# Repeat for each set of censor parameters
nocensoringflag<-FALSE
if(length(censorparams)<2){
if(is.na(censorparams)){
nocensoringflag<-TRUE
}
}
nocensoringflag
# This block runs the paramater sets that explore the impact of N, biomarker effect size,
# and carryover
simresults<-generateSimulatedResults(
trialdesigns=list(trialdesigns$OL,trialdesigns$OLBDC,trialdesigns$CO,trialdesigns$Nof1),
respparamsets=origrespparamsets[1],
blparamsets=blparamsets[1],
censorparams=censorparams,
modelparams=coremodelparams,
simparam=list(Nreps=Nreps,
progressiveSave=TRUE,
basesavename="coreresults",
nRep2save=5,
saveunit2start=1,
savedir=getwd()),
analysisparams=analysisparams,
rawdataout=FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pmsimstats)
library(data.table)
library(lme4)
library(lmerTest)
library(corpcor)
library(ggplot2)
library(MASS)
library(svMisc)
library(tictoc)
library(ggpubr)
library(gridExtra)
tdNof11<-buildtrialdesign(
name_longform="primary N-of-1 design",
name_shortform="N-of-1",
timepoints=c(4,8,9,10,11,12,16,20),
timeptname=c('OL1','OL2','BD1','BD2','BD3','BD4','COd','COp'),
expectancies=c(1,1,.5,.5,.5,.5,.5,.5),
ondrug=list(
# Assumes on drug entire previous interval and this measurement point
pathA=c(1,1,1,1,0,0,1,0),
pathB=c(1,1,1,1,0,0,0,1),
pathC=c(1,1,1,0,0,0,1,0),
pathD=c(1,1,1,0,0,0,0,1)
)
)
tdOL<-buildtrialdesign(
name_longform="open label",
name_shortform="OL",
timepoints=cumulative(rep(2.5,8)),
timeptname=paste("OL",1:8,sep=""),
expectancies=rep(1,8),
ondrug=list(
pathA=rep(1,8)
)
)
tdOLBDC<-buildtrialdesign(
name_longform="open label+blinded discontinuation",
name_shortform="OL+BDC",
timepoints=c(4,8,12,16,17,18,19,20),
timeptname=c('OL1','OL2','OL3','OL4','BD1','BD2','BD3','BD4'),
expectancies=c(1,1,1,1,.5,.5,.5,.5),
ondrug=list(
pathA=c(1,1,1,1,1,1,0,0),
pathB=c(1,1,1,1,1,0,0,0)
)
)
tdCO<-buildtrialdesign(
name_longform="traditional crossover",
name_shortform="CO",
timepoints=cumulative(rep(2.5,8)),
timeptname=c(paste("COa",1:4,sep=""),paste("COb",1:4,sep="")),
expectancies=rep(.5,8),
ondrug=list(
# Assumes on drug entire previous interval and this measurement point
pathA=c(1,1,1,1,0,0,0,0),
pathB=c(0,0,0,0,1,1,1,1)
)
)
tdPGRCT<-buildtrialdesign(
name_longform="Parallel group RCT",
name_shortform="PG-RCT",
timepoints=cumulative(rep(2.5,8)),
timeptname=paste("V",1:8,sep=""),
expectancies=rep(.5,8),
ondrug=list(
pathA=rep(1,8),
pathB=rep(0,8)
)
)
trialdesigns<-list(PG=tdPGRCT,OL=tdOL,OLBDC=tdOLBDC,CO=tdCO,Nof1=tdNof11)
data(extracted_bp)
extracted_bp
TRblparam<-list(
name="TR",
verbaldesc="Extracted from data with blank slate assumptions",
param=extracted_bp
)
altblparam1<-list(
name="LowerSDs",
verbaldesc="Lower SD for the BL",
param=data.table(
cat=c("BL","bm"),
m=extracted_bp$m,
sd=c(10,15.36)
)
)
blparamsets<-list(TRblparam,altblparam1)
data(extracted_rp)
extracted_rp
TRrespparam<-list(
name="TR",
verbaldesc="Extracted from data with blank slate assumptions",
param=extracted_rp
)
# Create some alternative response parameters:
altrespparam1<-list(
name="FastPbBrSlowTv",
verbaldesc="Faster Pb & Br, slower tv, all else same",
param=data.table(
cat=c("tv","pb","br"),
max=extracted_rp$max,
disp=extracted_rp$disp,
rate=c(.5,.2,.2),
sd=extracted_rp$sd
)
)
altrespparam2<-list(
name="LargeTVsmallPb",
verbaldesc="Large TV smaller Pb, all else same",
param=data.table(
cat=c("tv","pb","br"),
max=c(9,4,11),
disp=extracted_rp$disp,
rate=extracted_rp$rate,
sd=extracted_rp$sd
)
)
origrespparamsets<-list(TRrespparam,altrespparam1,altrespparam2)
# 1) ridiculous way to make it a data table
TRlongform<-as.data.table(melt(TRrespparam$param))
TRlongform[,rp:=paste(cat,variable,sep="_")]
TRgrid<-TRlongform$value
TRgrid<-data.table(rbind(TRgrid,TRgrid,TRgrid,TRgrid,TRgrid))
setnames(TRgrid,names(TRgrid),TRlongform$rp)
#2) fill it out:
maxesgrid<-data.table(
tv_max=c(18,3,3,8),
pb_max=c(3,18,3,8),
br_max=c(3,3,18,8)
)
rates<-c(.2,.35,.5)
ratesgrid<-expand.grid(
tv_rate=rates,
pb_rate=rates,
br_rate=rates
)
respparamsets<-vector(mode="list",length=1+dim(maxesgrid)[1]+dim(ratesgrid)[1])
respparamsets[[1]]<-TRrespparam
for(irp in 1:dim(maxesgrid)[1]){
op<-maxesgrid[irp,]
newrp<-list(
name=paste("MXtv",op$tv_max,"pb",op$pb_max,"br",op$br_max,sep=""),
verbaldesc=paste("MXtv",op$tv_max,"pb",op$pb_max,"br",op$br_max,sep=""),
param=data.table(
cat=c("tv","pb","br"),
max=as.numeric(op),
disp=extracted_rp$disp,
rate=extracted_rp$rate,
sd=as.numeric(op)
)
)
respparamsets[[irp+1]]<-newrp
}
for(irp in 1:dim(ratesgrid)[1]){
op<-ratesgrid[irp,]
newrp<-list(
name=paste("RTtv",op$tv_max,"pb",op$pb_max,"br",op$br_max,sep=""),
verbaldesc=paste("RTtv",op$tv_max,"pb",op$pb_max,"br",op$br_max,sep=""),
param=data.table(
cat=c("tv","pb","br"),
max=extracted_rp$max,
disp=extracted_rp$disp,
rate=as.numeric(op),
sd=extracted_rp$sd
)
)
respparamsets[[irp+1+dim(maxesgrid)[1]]]<-newrp
}
# One more version, to focus further on maxes:
TRlongform<-as.data.table(melt(TRrespparam$param))
TRlongform[,rp:=paste(cat,variable,sep="_")]
TRgrid<-TRlongform$value
TRgrid<-data.table(rbind(TRgrid,TRgrid,TRgrid,TRgrid,TRgrid))
setnames(TRgrid,names(TRgrid),TRlongform$rp)
maxes<-c(5,8,11)
maxesgrid<-expand.grid(
tv_max=maxes,
pb_max=maxes,
br_max=maxes
)
respparamsetsm<-vector(mode="list",length=dim(maxesgrid)[1])
for(irp in 1:dim(maxesgrid)[1]){
op<-maxesgrid[irp,]
newrp<-list(
name=paste("MXtv",op$tv_max,"pb",op$pb_max,"br",op$br_max,sep=""),
verbaldesc=paste("MXtv",op$tv_max,"pb",op$pb_max,"br",op$br_max,sep=""),
param=data.table(
cat=c("tv","pb","br"),
max=as.numeric(op),
disp=extracted_rp$disp,
rate=extracted_rp$rate,
sd=as.numeric(op)
)
)
respparamsetsm[[irp]]<-newrp
}
censorparams<-data.table(
names=c("balanced","more of flat","more of biased","high dropout"),
beta0=c(.05,.05 ,.05,.15),
beta1=c(.5,.2,.8 ,.5),
eb1=  c(2,  2  ,2  ,2 )
)
coremodelparams<-expand.grid(
N=c(35,70),
c.bm=c(0,.3,.6),
carryover_t1half=c(0,.1,.2),
c.tv=.8,c.pb=.8,c.br=.8,
c.cf1t=.2,c.cfct=.1
)
abbrevmodelparams<-expand.grid(
N=c(70),
c.bm=c(0,.3),
carryover_t1half=c(0),
c.tv=.8,c.pb=.8,c.br=.8,
c.cf1t=.2,c.cfct=.1
)
xabbrevmodelparams2<-expand.grid(
N=c(35),
c.bm=c(.6),
carryover_t1half=c(0),
c.tv=.8,c.pb=.8,c.br=.8,
c.cf1t=.2,c.cfct=.1
)
trajmp<-expand.grid(
N=c(35),
c.bm=c(.6),
carryover_t1half=c(0,.5),
c.tv=.8,c.pb=.8,c.br=.8,
c.cf1t=.2,c.cfct=.1
)
# Parameters on the analysis side
analysisparams<-expand.grid(useDE=FALSE,t_random_slope=FALSE)
# This block runs the paramater sets that explore the impact of N, biomarker effect size,
# and carryover
simresults<-generateSimulatedResults(
trialdesigns=list(trialdesigns$OL,trialdesigns$OLBDC,trialdesigns$CO,trialdesigns$Nof1),
respparamsets=origrespparamsets[1],
blparamsets=blparamsets[1],
censorparams=censorparams,
modelparams=coremodelparams,
simparam=list(Nreps=Nreps,
progressiveSave=TRUE,
basesavename="coreresults",
nRep2save=5,
saveunit2start=1,
savedir=getwd()),
analysisparams=analysisparams,
rawdataout=FALSE)
generateSimulatedResults<-function(trialdesigns,respparamsets,blparamsets,
censorparams,modelparams,simparam,analysisparams,
rawdataout=FALSE){
# defaults
if(missing(analysisparams)) analysisparams<-list(useDE=TRUE,randomslopes=FALSE)
# Hold original directory in case we change it
initialdirectory<-getwd()
# Setup our path through the variable parameters and
# initialize counts used for tracking on the screen:
tic("Total time:")
VPGmaster<-expand.grid(
trialdesign=1:length(trialdesigns),
respparamset=1:length(respparamsets),
blparamset=1:length(blparamsets),
modelparamset=1:dim(modelparams)[1]
)
nV<-dim(VPGmaster)[1]
# note that censor param not included because done after data generation
irep<-1
totrep<-nV*simparam$Nreps
totparamsets<-nV
# If we're doing a progressive save, have a "large loop" that controls the smaller inside loop
if(simparam$progressiveSave==FALSE){
nLargeLoops<-1
LLstarts<-1
LLstops<-nV
}else{
nLargeLoops<-ceiling(nV/simparam$nRep2save)
if(nLargeLoops>1){
LLstarts<-c(1,1+simparam$nRep2save*(1:(nLargeLoops-1)))
LLstops<-c(LLstarts[2:nLargeLoops]-1,nV)
}else{
LLstarts<-1
LLstops<-nV
}
}
for(iLL in simparam$saveunit2start:nLargeLoops){
tic(paste("***Progressive Save Unit ",(iLL+1-simparam$saveunit2start)," of ",(nLargeLoops+1-simparam$saveunit2start),
" complete",sep=""))
VPG<-VPGmaster[LLstarts[iLL]:LLstops[iLL],]
iparamset<-LLstarts[iLL]
# Create output structure:
out<-cbind(VPG[0,],data.table(censorparamset=integer(),use_DE=logical(),t_random_slope=logical(),
irep=integer(),frac_NA=numeric(),beta=numeric(),betaSE=numeric(),
p=numeric(),issingular=logical(),warning=character()))
if(rawdataout){d_out<-list(precensor=list(),postcensor=list())}
# Loop through the different variable parameters
for(iR in 1:dim(VPG)[1]){
tic(paste("Parameter set ",iR," of ",dim(VPG)[1]," in this save unit now complete (on ",iparamset," of ",nV," total sets)",sep=""))
td<-trialdesigns[[VPG[iR,"trialdesign"]]][[2]]
p<-list()
p$respparam<-respparamsets[[VPG[iR,"respparamset"]]]$param
p$blparam<-blparamsets[[VPG[iR,"blparamset"]]]$param
p$modelparam<-modelparams[VPG[iR,"modelparamset"],]
# Run this set of params 1 time to create N*Nrep simuated participants then subset, for efficiency;
# have to create the dat for each path and merge
#
nP<-length(td)
Ns<-p$modelparam$N%/%nP # How many in each path run?
Ns<-Ns+c(rep(1,p$modelparam$N%%nP),rep(0,nP-p$modelparam$N%%nP)) # distribute the remainder
NNs<-Ns*simparam$Nreps # here adjust so doing all with this paramset at once
p$modelparam$N<-NNs[[1]]
dat<-generateData(p$modelparam,p$respparam,p$blparam,td[[1]],FALSE,TRUE)
dat[,path:=1]
dat[,replicate:=rep(1:simparam$Nreps,Ns[1])]
if(nP>1){
for(iP in 2:nP){
p$modelparam$N<-NNs[[iP]]
dat2<-generateData(p$modelparam,p$respparam,p$blparam,td[[iP]],FALSE,TRUE)
dat2[,path:=iP]
dat2[,replicate:=rep(1:simparam$Nreps,Ns[iP])]
dat<-rbind(dat,dat2)
}
}
p$modelparam$N<-sum(Ns)
# Analysis chunk repeat x nAnalysisParametersets:
for(iAP in 1:dim(analysisparams)[1]){
# Analyze entire population to get "empircal true beta" (ETbeta)
#tic("analysis-whole population")
ETanalysisout<-lme_analysis(td,dat,analysisparams[iAP,])
#toc()
# Now, for each replicate: analyize and save output
#tic("analysis-replicates")
for(iS in 1:simparam$Nreps){
# tryCatch(
#   expr = {
#     analysisout<-lme_analysis(td,dat[replicate==iS],analysisparams[iAP,])
#     analysisout$warning<-NA
#   },
#   error=function(e){
#     message('Error in call to lme_analysis')
#     print(e)
#     print(paste("Error occurred on VPG line ",iR," on analysis parameterset ",AP," on replicate ",iS,sep=""))
#   },
#   warning=function(w){
#     message('Error in call to lme_analysis')
#     print(w)
#     print(paste("Error occurred on VPG line ",iR," on analysis parameterset ",AP," on replicate ",iS,sep=""))
#     analysisout<-data.table(beta=NA,betaSE=NA,p=NA,issingular=analysisout$issingular,warning=w)
#   }
# )
analysisout<-lme_analysis(td,dat[replicate==iS],analysisparams[iAP,])
o<-cbind(VPG[iR,],as.data.table(p$modelparam),
data.table(censorparamset=0,use_DE=analysisparams[iAP,]$useDE,t_random_slope=analysisparams[iAP,]$t_random_slope,
irep=((iR-1)*simparam$Nreps+iS),frac_NA=0,ETbeta=ETanalysisout$beta,
ETbetaSE=ETanalysisout$betaSE,beta=analysisout$beta,betaSE=analysisout$betaSE,
p=analysisout$p,issingular=analysisout$issingular,warning=analysisout$warning))
out<-rbind(out,o)
}
# Repeat for each set of censor parameters
nocensoringflag<-FALSE
if(length(censorparams)<2){
if(is.na(censorparams)){
nocensoringflag<-TRUE
}
}
if(!nocensoringflag){
h_datc<-vector(mode="list",length=(dim(censorparams)[1]))
for(iC in 1:dim(censorparams)[1]){
h_datc[[iC]]<-censordata(dat,td[[1]],censorparams[iC,])
for(iS in 1:simparam$Nreps){
frac_NA<-sum(is.na(h_datc[[iC]][replicate==iS]))/(p$modelparam$N*length(td[[1]]$t_wk))
analysisout<-lme_analysis(td,h_datc[[iC]][replicate==iS],analysisparams[iAP,])
o<-cbind(VPG[iR,],as.data.table(p$modelparam),
data.table(censorparamset=iC,use_DE=analysisparams[iAP,]$useDE,t_random_slope=analysisparams[iAP,]$t_random_slope,
irep=((iR-1)*simparam$Nreps+iS),frac_NA=frac_NA,ETbeta=ETanalysisout$beta,
ETbetaSE=ETanalysisout$betaSE,beta=analysisout$beta,betaSE=analysisout$betaSE,
p=analysisout$p,issingular=analysisout$issingular,warning=analysisout$warning))
out<-rbind(out,o)
}
}
#toc()
}else{
h_datc<-NA
}
}
if(rawdataout){
d_out$precensor[[iparamset]]<-dat
d_out$postcensor[[iparamset]]<-h_datc
}
iparamset<-iparamset+1
toc()
#progress(iparamset,max.value=totparamsets)
} # end iR
# Organize the output and return it
if(rawdataout){
outpt<-list(results=as.data.table(out),
parameterselections=list(trialdesigns=trialdesigns,
respparamsets=respparamsets,
blparamsets=blparamsets,
censorparams=censorparams,
modelparams=modelparams,
analysisparams=analysisparams,
simparam=simparam),
rawdata=d_out)
}else{
outpt<-list(results=as.data.table(out),
parameterselections=list(trialdesigns=trialdesigns,
respparamsets=respparamsets,
blparamsets=blparamsets,
censorparams=censorparams,
modelparams=modelparams,
analysisparams=analysisparams,
simparam=simparam))
}
if(simparam$progressiveSave){
setwd(simparam$savedir)
saveRDS(outpt,paste(simparam$basesavename,iLL,sep="_save"))
}
toc()
} # end iLL
toc()
setwd(initialdirectory)
if(!simparam$progressiveSave) return(outpt)
}
# This block runs the paramater sets that explore the impact of N, biomarker effect size,
# and carryover
simresults<-generateSimulatedResults(
trialdesigns=list(trialdesigns$OL,trialdesigns$OLBDC,trialdesigns$CO,trialdesigns$Nof1),
respparamsets=origrespparamsets[1],
blparamsets=blparamsets[1],
censorparams=censorparams,
modelparams=coremodelparams,
simparam=list(Nreps=Nreps,
progressiveSave=TRUE,
basesavename="coreresults",
nRep2save=5,
saveunit2start=1,
savedir=getwd()),
analysisparams=analysisparams,
rawdataout=FALSE)
document()
?pmsimstats
devtools::build(binary=TRUE)

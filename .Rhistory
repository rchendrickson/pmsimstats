library(gridExtra)
library(merTools)
tdOL<-buildtrialdesign(
name_longform="open label",
name_shortform="OL",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(1,3),
ondrug=list(
pathA=rep(1,3)
)
)
tdPGRCT<-buildtrialdesign(
name_longform="Parallel group RCT",
name_shortform="PG-RCT",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(.5,3),
ondrug=list(
pathA=rep(1,3),
pathB=rep(0,3)
)
)
trialdesigns<-list(PG=tdPGRCT,OL=tdOL)
analysisparams<-expand.grid(useDE=FALSE,t_random_slope=FALSE,full_model_out=TRUE)
load(file = "../data/CTdata.rda")
data(CTdata)
CTdata
lme_analysis.outPG<-lme_analysis(trialdesigns$PG$trialpaths,CTdata,op=analysisparams)
lme_analysis.outOL<-lme_analysis(trialdesigns$OL$trialpaths,CTdata[path==1],op=analysisparams)
lme_analysis.outPG
lme_analysis.outOL
# Wrange the data into a convenient to look at form:
# The data we started with
dt_long<-lme_analysis.outOL$datamerged
dt_long$dataindex<-1:dim(dt_long)[1]
# The predicted values
predicted<-predict(lme_analysis.outOL$fit)
predicted_dt<-data.table(dataindex=as.numeric(names(predicted)),predicted=predicted)
# Merge them
dt_long<-merge(dt_long,predicted_dt,by="dataindex")
# Switch to wide form
dt_wide<-dcast(data=dt_long,ptID+bm~t,value.var=c("Sx","predicted"))
# Define "response" as a convenient, single index:
dt_wide[,predicted_response:=(predicted_15-predicted_0)]
dt_wide[,actual_response:=(Sx_15-Sx_0)]
# Drop those with missing endpoints, just to make it cleaner looking
dt_wide<-dt_wide[!is.na(Sx_15)]
# Plot it
ggplot(data=dt_wide)+
geom_line(aes(x=bm,y=predicted_response),color="red")+
geom_point(aes(x=bm,y=actual_response))+
xlab("Standing Systolic BP at baseline")+
ylab("Change in total PTSD symptom intensity over 15 weeks")
dim(dt_long)
analysisparams<-expand.grid(useDE=FALSE,t_random_slope=FALSE,full_model_out=TRUE)
lme_analysis.outPG<-lme_analysis(trialdesigns$PG$trialpaths,CTdata,op=analysisparams)
lme_analysis.outPG
lme_analysis.outOL$datamerged
# Wrange the data into a convenient to look at form:
# The data we started with
dt_long<-lme_analysis.outOL$datamerged
dim(dt_long)
dim(dt_long)[1]>0
lme_analysis.outOL
names(lme_analysis.outOL)
?mvrnorm
?lme_analysis
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pmsimstats)
library(data.table)
library(lme4)
library(lmerTest)
library(corpcor)
library(ggplot2)
library(MASS)
library(svMisc)
library(tictoc)
library(ggpubr)
library(gridExtra)
library(merTools)
tdOL<-buildtrialdesign(
name_longform="open label",
name_shortform="OL",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(1,3),
ondrug=list(
pathA=rep(1,3)
)
)
tdPGRCT<-buildtrialdesign(
name_longform="Parallel group RCT",
name_shortform="PG-RCT",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(.5,3),
ondrug=list(
pathA=rep(1,3),
pathB=rep(0,3)
)
)
trialdesigns<-list(PG=tdPGRCT,OL=tdOL)
analysisparams<-expand.grid(useDE=FALSE,t_random_slope=FALSE,full_model_out=TRUE)
load(file = "../data/CTdata.rda")
CTdata
analysisparams
lme_analysis.outPG<-lme_analysis(trialdesigns$PG$trialpaths,CTdata,op=analysisparams)
lme_analysis.outOL<-lme_analysis(trialdesigns$OL$trialpaths,CTdata[path==1],op=analysisparams)
lme_analysis.outPG
lme_analysis.outOL
lme_analysis.outOL$form
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pmsimstats)
library(data.table)
library(lme4)
library(lmerTest)
library(corpcor)
library(ggplot2)
library(MASS)
library(svMisc)
library(tictoc)
library(ggpubr)
library(gridExtra)
library(merTools)
tdOL<-buildtrialdesign(
name_longform="open label",
name_shortform="OL",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(1,3),
ondrug=list(
pathA=rep(1,3)
)
)
tdPGRCT<-buildtrialdesign(
name_longform="Parallel group RCT",
name_shortform="PG-RCT",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(.5,3),
ondrug=list(
pathA=rep(1,3),
pathB=rep(0,3)
)
)
trialdesigns<-list(PG=tdPGRCT,OL=tdOL)
analysisparams<-expand.grid(useDE=FALSE,t_random_slope=FALSE,full_model_out=TRUE)
load(file = "../data/CTdata.rda")
CTdata
analysisparams
lme_analysis.outPG<-lme_analysis(trialdesigns$PG$trialpaths,CTdata,op=analysisparams)
lme_analysis.outPG
lme_analysis.outOL
analysisparams
lme_analysis.outPG<-lme_analysis(trialdesigns$PG$trialpaths,CTdata,op=analysisparams)
lme_analysis.outOL<-lme_analysis(trialdesigns$OL$trialpaths,CTdata[path==1],op=analysisparams)
lme_analysis.outPG
lme_analysis.outOL
names(lme_analysis.outOL)
lme_analysis<-function(trialdesign_set,dat,op){
if(missing(op)){
op$useDE<-TRUE
op$t_random_slope<-FALSE
op$full_model_out<-FALSE
}
n_groups<-length(trialdesign_set)
datout<-list(rep(NA),n_groups)
lastptID<-0
for(g in 1:n_groups){
trialdesign<-trialdesign_set[[g]]
datSingle<-dat[path==g]
# I. Turn data into this format
# Format trialdesign:
# Add a BL row
trialdesign<-rbind(list(timeptnames="BL",t_wk=0,e=0,tod=0,tsd=0,tpb=0),trialdesign)
# For minimization of coding erors, t_wk is length of the block, not time since
# start, so create a "t" that is just true time with bl as 0:
trialdesign[,t:=as.integer(NA)]
trialdesign$t<-cumulative(trialdesign$t_wk)
# Format dat:
# Make pt data dt that just has the numbers we actually want
evalstring<-paste("data<-datSingle[,.(ptID,bm,BL,",
paste(trialdesign$timeptnames,sep="",collapse=","),")]",sep="")
eval(parse(text=evalstring))
# Make sure the ptID is unique even if we're merging across groups:
data$ptID<-data$ptID+lastptID
lastptID<-max(data$ptID)
# Turn it long-form, then merge in the trialdesign data
data.m1<-melt(data,id.vars=c("ptID","bm"),measure.vars=trialdesign$timeptnames,
variable.name="timeptnames",value.name="Sx",na.rm=FALSE)
data.m2<-merge(data.m1,
trialdesign[,.(timeptnames,t,De=e,Db=(tod>0))],
by="timeptnames",all=TRUE)
datout[[g]]<-data.m2
}
datamerged<-datout[[1]]
if(n_groups>1){for(g in 2:n_groups){datamerged<-rbind(datamerged,datout[[g]])}}
# Tests we'll use to sort out what model to use:
# 1) Test whether can possibly include the expectancy-related factor:
varInExp<-length(unique(trialdesign$e[2:length(trialdesign$e)]))
# 2) Test whether can use Db vs need to use t for the interaction term:
datamerged[t>0,meanDb:=mean(Db),by=ptID]
datamerged[t>0,DbVar:=((meanDb!=0)&(meanDb!=1)),by=ptID]
varInDb<-(sum(datamerged[t>0]$DbVar==TRUE)>0)
if(!varInDb){
# Only analyze folks who are ever on drug, in this case:
iEverOnDrug<-unique(datamerged[meanDb==1]$ptID)
datamerged<-datamerged[ptID%in%iEverOnDrug]
}
# Use these to pick a model
if(varInDb){
if(op$t_random_slope){
if((varInExp>1)&(op$useDE==TRUE)){
form<-Sx~bm+De+Db+t+bm*Db+(1+t|ptID)
} else {
form<-Sx~bm+Db+t+bm*Db+(1+t|ptID)
}
}else{
if((varInExp>1)&(op$useDE==TRUE)){
form<-Sx~bm+De+Db+t+bm*Db+(1|ptID)
} else {
form<-Sx~bm+Db+t+bm*Db+(1|ptID)
}
}
}else{
if(op$t_random_slope){
if((varInExp>1)&(op$useDE==TRUE)){
form<-Sx~bm+De+t+bm*t+(1+t|ptID)
} else {
form<-Sx~bm+t+bm*t+(1+t|ptID)
}
}else{
if((varInExp>1)&(op$useDE==TRUE)){
form<-Sx~bm+De+t+bm*t+(1|ptID)
} else {
form<-Sx~bm+t+bm*t+(1|ptID)
}
}
}
# Run (should insert tryCatch here, but not working!)
fit<-lmer(form,data=datamerged)
holdWarning<-summary(fit)$fitMsgs
if(length(holdWarning)==0) holdWarning<-as.character(NA)
# set issingular flag off, turn on if get singular warning
issingular<-FALSE
if(length(summary(fit)$optinfo$conv$lme4$messages)>0){
if(summary(fit)$optinfo$conv$lme4$messages[[1]]=="boundary (singular) fit: see ?isSingular"){
issingular<-TRUE
}
}
# Package output
c<-summary(fit)$coefficients
if(varInDb){
p<-c['bm:DbTRUE','Pr(>|t|)']
beta<-c['bm:DbTRUE','Estimate']
betaSE<-c['bm:DbTRUE','Std. Error']
}else{
p<-c['bm:t','Pr(>|t|)']
beta<-c['bm:t','Estimate']
betaSE<-c['bm:t','Std. Error']
}
# pvalue plan from http://mindingthebrain.blogspot.in/2014/02/three-ways-to-get-parameter-specific-p.html
# this is the medium-conservative option
out<-data.table(beta=beta,betaSE=betaSE,p=p,issingular=issingular,warning=holdWarning)
# If full model output reqeusted, will repackage a bit:
if(op$full_model_out){
out<-list(form=form,fit=fit,datamerged=datamerged,stdout=out)
}
return(out)
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pmsimstats)
library(data.table)
library(lme4)
library(lmerTest)
library(corpcor)
library(ggplot2)
library(MASS)
library(svMisc)
library(tictoc)
library(ggpubr)
library(gridExtra)
library(merTools)
tdOL<-buildtrialdesign(
name_longform="open label",
name_shortform="OL",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(1,3),
ondrug=list(
pathA=rep(1,3)
)
)
tdPGRCT<-buildtrialdesign(
name_longform="Parallel group RCT",
name_shortform="PG-RCT",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(.5,3),
ondrug=list(
pathA=rep(1,3),
pathB=rep(0,3)
)
)
trialdesigns<-list(PG=tdPGRCT,OL=tdOL)
analysisparams<-expand.grid(useDE=FALSE,t_random_slope=FALSE,full_model_out=TRUE)
load(file = "../data/CTdata.rda")
CTdata
analysisparams
lme_analysis.outPG<-lme_analysis(trialdesigns$PG$trialpaths,CTdata,op=analysisparams)
lme_analysis.outOL<-lme_analysis(trialdesigns$OL$trialpaths,CTdata[path==1],op=analysisparams)
lme_analysis.outPG
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(pmsimstats)
library(data.table)
library(lme4)
library(lmerTest)
library(corpcor)
library(ggplot2)
library(MASS)
library(svMisc)
library(tictoc)
library(ggpubr)
library(gridExtra)
library(merTools)
tdOL<-buildtrialdesign(
name_longform="open label",
name_shortform="OL",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(1,3),
ondrug=list(
pathA=rep(1,3)
)
)
tdPGRCT<-buildtrialdesign(
name_longform="Parallel group RCT",
name_shortform="PG-RCT",
timepoints=c(7,11,15),
timeptname=paste("T",1:3,sep=""),
expectancies=rep(.5,3),
ondrug=list(
pathA=rep(1,3),
pathB=rep(0,3)
)
)
trialdesigns<-list(PG=tdPGRCT,OL=tdOL)
analysisparams<-expand.grid(useDE=FALSE,t_random_slope=FALSE,full_model_out=TRUE)
load(file = "../data/CTdata.rda")
CTdata
analysisparams
lme_analysis.outPG<-lme_analysis(trialdesigns$PG$trialpaths,CTdata,op=analysisparams)
lme_analysis.outOL<-lme_analysis(trialdesigns$OL$trialpaths,CTdata[path==1],op=analysisparams)
lme_analysis.outPG
lme_analysis.outOL
names(lme_analysis.outOL)
lme_analysis.outOL$form
lme_analysis<-function(trialdesign_set,dat,op){
if(missing(op)){
op$useDE<-TRUE
op$t_random_slope<-FALSE
op$full_model_out<-FALSE
}
n_groups<-length(trialdesign_set)
datout<-list(rep(NA),n_groups)
lastptID<-0
for(g in 1:n_groups){
trialdesign<-trialdesign_set[[g]]
datSingle<-dat[path==g]
# I. Turn data into this format
# Format trialdesign:
# Add a BL row
trialdesign<-rbind(list(timeptnames="BL",t_wk=0,e=0,tod=0,tsd=0,tpb=0),trialdesign)
# For minimization of coding erors, t_wk is length of the block, not time since
# start, so create a "t" that is just true time with bl as 0:
trialdesign[,t:=as.integer(NA)]
trialdesign$t<-cumulative(trialdesign$t_wk)
# Format dat:
# Make pt data dt that just has the numbers we actually want
evalstring<-paste("data<-datSingle[,.(ptID,bm,BL,",
paste(trialdesign$timeptnames,sep="",collapse=","),")]",sep="")
eval(parse(text=evalstring))
# Make sure the ptID is unique even if we're merging across groups:
data$ptID<-data$ptID+lastptID
lastptID<-max(data$ptID)
# Turn it long-form, then merge in the trialdesign data
data.m1<-melt(data,id.vars=c("ptID","bm"),measure.vars=trialdesign$timeptnames,
variable.name="timeptnames",value.name="Sx",na.rm=FALSE)
data.m2<-merge(data.m1,
trialdesign[,.(timeptnames,t,De=e,Db=(tod>0))],
by="timeptnames",all=TRUE)
datout[[g]]<-data.m2
}
datamerged<-datout[[1]]
if(n_groups>1){for(g in 2:n_groups){datamerged<-rbind(datamerged,datout[[g]])}}
# Tests we'll use to sort out what model to use:
# 1) Test whether can possibly include the expectancy-related factor:
varInExp<-length(unique(trialdesign$e[2:length(trialdesign$e)]))
# 2) Test whether can use Db vs need to use t for the interaction term:
datamerged[t>0,meanDb:=mean(Db),by=ptID]
datamerged[t>0,DbVar:=((meanDb!=0)&(meanDb!=1)),by=ptID]
varInDb<-(sum(datamerged[t>0]$DbVar==TRUE)>0)
if(!varInDb){
# Only analyze folks who are ever on drug, in this case:
iEverOnDrug<-unique(datamerged[meanDb==1]$ptID)
datamerged<-datamerged[ptID%in%iEverOnDrug]
}
# Use these to pick a model
if(varInDb){
if(op$t_random_slope){
if((varInExp>1)&(op$useDE==TRUE)){
form<-Sx~bm+De+Db+t+bm*Db+(1+t|ptID)
} else {
form<-Sx~bm+Db+t+bm*Db+(1+t|ptID)
}
}else{
if((varInExp>1)&(op$useDE==TRUE)){
form<-Sx~bm+De+Db+t+bm*Db+(1|ptID)
} else {
form<-Sx~bm+Db+t+bm*Db+(1|ptID)
}
}
}else{
if(op$t_random_slope){
if((varInExp>1)&(op$useDE==TRUE)){
form<-Sx~bm+De+t+bm*t+(1+t|ptID)
} else {
form<-Sx~bm+t+bm*t+(1+t|ptID)
}
}else{
if((varInExp>1)&(op$useDE==TRUE)){
form<-Sx~bm+De+t+bm*t+(1|ptID)
} else {
form<-Sx~bm+t+bm*t+(1|ptID)
}
}
}
# Run (should insert tryCatch here, but not working!)
fit<-lmer(form,data=datamerged)
holdWarning<-summary(fit)$fitMsgs
if(length(holdWarning)==0) holdWarning<-as.character(NA)
# set issingular flag off, turn on if get singular warning
issingular<-FALSE
if(length(summary(fit)$optinfo$conv$lme4$messages)>0){
if(summary(fit)$optinfo$conv$lme4$messages[[1]]=="boundary (singular) fit: see ?isSingular"){
issingular<-TRUE
}
}
# Package output
c<-summary(fit)$coefficients
if(varInDb){
p<-c['bm:DbTRUE','Pr(>|t|)']
beta<-c['bm:DbTRUE','Estimate']
betaSE<-c['bm:DbTRUE','Std. Error']
}else{
p<-c['bm:t','Pr(>|t|)']
beta<-c['bm:t','Estimate']
betaSE<-c['bm:t','Std. Error']
}
# pvalue plan from http://mindingthebrain.blogspot.in/2014/02/three-ways-to-get-parameter-specific-p.html
# this is the medium-conservative option
out<-data.table(beta=beta,betaSE=betaSE,p=p,issingular=issingular,warning=holdWarning)
# If full model output reqeusted, will repackage a bit:
if(op$full_model_out){
out<-list(form=form,fit=fit,datamerged=datamerged,stdout=out)
}
return(out)
}
analysisparams
lme_analysis.outPG<-lme_analysis(trialdesigns$PG$trialpaths,CTdata,op=analysisparams)
lme_analysis.outOL<-lme_analysis(trialdesigns$OL$trialpaths,CTdata[path==1],op=analysisparams)
lme_analysis.outPG
lme_analysis.outOL
names(lme_analysis.outOL)
lme_analysis.outOL$form
library("devtools")
library("roxygen2")
install_github("rchendrickson/pmsimstats")
#devtools::install_github("r-lib/devtools")
remove.packages("vctrs")
install_github("rchendrickson/pmsimstats")
install_github("rchendrickson/pmsimstats")
install_github("rchendrickson/pmsimstats")
install_github("rchendrickson/pmsimstats")
remove.packages("rlang")
.libPaths()
remove.packages("rlang",lib = .libPaths()[2])
remove.packages("rlang",lib = .libPaths()[1])
?install_github
devtools::install_github("rchendrickson/pmsimstats")
install_github("rchendrickson/pmsimstats",upgrade = "never")
install_github("rchendrickson/pmsimstats")
library("devtools")
.libPaths()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
